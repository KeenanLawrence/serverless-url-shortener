---
service: wigroup-url-shortener
#app: your-app-name
#tenant: your-tenant-name

# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7

  stage: dev
  region: eu-west-1

  profile: devzone-new

iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:PutItem
      - dynamodb:DeleteItem
      - dynamodb:GetItem
      - dynamodb:Query
      - dynamodb:UpdateItem
    Resource: arn:aws:dynamodb:eu-west-1:863842543313:table/url-shortener-table

  - Effect: "Allow"
   Action:
     - "s3:PutObject"
   Resource:
     Fn::Join:
       - ""
       - - "arn:aws:s3:::"
         - "Ref" : "ServerlessDeploymentBucket"
         - "/*"

functions:
  url_shortener:
    handler: url_shortener.process_request

    package:
      include:
        - url_shortener.py
      # exclude:
      #   - .gitignore
      #   - package.json
      #   - venv/**

  url_shortener_retrieve:
    handler: url_shortener_retrieve.process_request

    package:
      include:
        - url_shortener_retrieve.py
      # exclude:
      #   - .gitignore
      #   - package.json
      #   - venv/**
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    NewResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: my-new-bucket
  Outputs:
    NewOutput:
      Description: "Description for the output"
      Value: "Some output value"
